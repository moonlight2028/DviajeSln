// <auto-generated />
using System;
using Dviaje.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dviaje.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240731200422_InsertTestDataUsersTuristas")]
    partial class InsertTestDataUsersTuristas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dviaje.Models.Adjunto", b =>
                {
                    b.Property<int>("IdAdjunto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAdjunto"));

                    b.Property<int>("IdAtencion")
                        .HasColumnType("integer");

                    b.Property<string>("RutaAdjunto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("IdAdjunto");

                    b.HasIndex("IdAtencion");

                    b.HasIndex("RutaAdjunto")
                        .IsUnique();

                    b.ToTable("Adjuntos");
                });

            modelBuilder.Entity("Dviaje.Models.AtencionViajero", b =>
                {
                    b.Property<int>("IdAtencion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAtencion"));

                    b.Property<string>("Asunto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("AtencionViajeroPrioridad")
                        .HasColumnType("integer");

                    b.Property<int>("AtencionViajeroTipoPqrs")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(250)
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaAtencion")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("timestamp");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Respuesta")
                        .HasMaxLength(250)
                        .HasColumnType("text");

                    b.HasKey("IdAtencion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("AtencionViajeros");
                });

            modelBuilder.Entity("Dviaje.Models.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCategoria"));

                    b.Property<string>("NombreCategoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RutaIcono")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("IdCategoria");

                    b.HasIndex("NombreCategoria")
                        .IsUnique();

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Dviaje.Models.Favorito", b =>
                {
                    b.Property<int>("IdFavorito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdFavorito"));

                    b.Property<int>("IdPublicacion")
                        .HasColumnType("integer");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdFavorito");

                    b.HasIndex("IdPublicacion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Favoritos");
                });

            modelBuilder.Entity("Dviaje.Models.FechaNoDisponible", b =>
                {
                    b.Property<int>("IdFechaNoDisponible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdFechaNoDisponible"));

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("FechaInicial")
                        .HasColumnType("timestamp");

                    b.Property<int>("IdPublicacion")
                        .HasColumnType("integer");

                    b.HasKey("IdFechaNoDisponible");

                    b.HasIndex("IdPublicacion");

                    b.ToTable("FechasNoDisponibles");
                });

            modelBuilder.Entity("Dviaje.Models.Publicacion", b =>
                {
                    b.Property<int>("IdPublicacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPublicacion"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp");

                    b.Property<string>("IdAliado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumeroResenas")
                        .HasColumnType("integer");

                    b.Property<double>("Precio")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("Puntuacion")
                        .HasColumnType("numeric(1,1)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("IdPublicacion");

                    b.HasIndex("IdAliado");

                    b.ToTable("Publicaciones");
                });

            modelBuilder.Entity("Dviaje.Models.PublicacionCategoria", b =>
                {
                    b.Property<int>("IdPublicacionCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPublicacionCategoria"));

                    b.Property<int>("IdCategoria")
                        .HasColumnType("integer");

                    b.Property<int>("IdPublicacion")
                        .HasColumnType("integer");

                    b.HasKey("IdPublicacionCategoria");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdPublicacion");

                    b.ToTable("PublicacionesCategorias");
                });

            modelBuilder.Entity("Dviaje.Models.PublicacionFavorita", b =>
                {
                    b.Property<int>("IdPublicacionFavorita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPublicacionFavorita"));

                    b.Property<int>("IdPublicacion")
                        .HasColumnType("integer");

                    b.HasKey("IdPublicacionFavorita");

                    b.HasIndex("IdPublicacion");

                    b.ToTable("PublicacionesFavoritas");
                });

            modelBuilder.Entity("Dviaje.Models.PublicacionImagen", b =>
                {
                    b.Property<int>("IdPublicacionImagen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPublicacionImagen"));

                    b.Property<int>("IdPublicacion")
                        .HasColumnType("integer");

                    b.Property<string>("Ruta")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("IdPublicacionImagen");

                    b.HasIndex("IdPublicacion");

                    b.HasIndex("Ruta")
                        .IsUnique();

                    b.ToTable("PublicacionesImagenes");
                });

            modelBuilder.Entity("Dviaje.Models.PublicacionRestriccion", b =>
                {
                    b.Property<int>("IdPublicacionRestriccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPublicacionRestriccion"));

                    b.Property<int>("IdPublicacion")
                        .HasColumnType("integer");

                    b.Property<int>("IdRestriccion")
                        .HasColumnType("integer");

                    b.HasKey("IdPublicacionRestriccion");

                    b.HasIndex("IdPublicacion");

                    b.HasIndex("IdRestriccion");

                    b.ToTable("PublicacionesRestricciones");
                });

            modelBuilder.Entity("Dviaje.Models.PublicacionServicio", b =>
                {
                    b.Property<int>("IdPublicacionServicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPublicacionServicio"));

                    b.Property<int>("IdPublicacion")
                        .HasColumnType("integer");

                    b.Property<int>("IdServicio")
                        .HasColumnType("integer");

                    b.HasKey("IdPublicacionServicio");

                    b.HasIndex("IdPublicacion");

                    b.HasIndex("IdServicio");

                    b.ToTable("PublicacionesServicios");
                });

            modelBuilder.Entity("Dviaje.Models.Resena", b =>
                {
                    b.Property<int>("IdResena")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdResena"));

                    b.Property<int>("Calificacion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp");

                    b.Property<int>("IdReserva")
                        .HasColumnType("integer");

                    b.Property<int>("MeGusta")
                        .HasColumnType("integer");

                    b.Property<string>("Opinion")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("text");

                    b.HasKey("IdResena");

                    b.HasIndex("IdReserva");

                    b.ToTable("Resenas");
                });

            modelBuilder.Entity("Dviaje.Models.Reserva", b =>
                {
                    b.Property<int>("IdReserva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdReserva"));

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("FechaInicial")
                        .HasColumnType("timestamp");

                    b.Property<int>("IdPublicacion")
                        .HasColumnType("integer");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumeroPersonas")
                        .HasColumnType("integer");

                    b.Property<int>("ReservaEstado")
                        .HasColumnType("integer");

                    b.HasKey("IdReserva");

                    b.HasIndex("IdPublicacion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("Dviaje.Models.Restriccion", b =>
                {
                    b.Property<int>("IdRestriccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRestriccion"));

                    b.Property<string>("NombreRestriccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RutaIcono")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("IdRestriccion");

                    b.HasIndex("NombreRestriccion")
                        .IsUnique();

                    b.ToTable("Restricciones");
                });

            modelBuilder.Entity("Dviaje.Models.Servicio", b =>
                {
                    b.Property<int>("IdServicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdServicio"));

                    b.Property<string>("NombreServicio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RutaIcono")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ServicioTipo")
                        .HasColumnType("integer");

                    b.HasKey("IdServicio");

                    b.HasIndex("NombreServicio")
                        .IsUnique();

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("Dviaje.Models.ServicioAdicional", b =>
                {
                    b.Property<int>("IdServicioAdicional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdServicioAdicional"));

                    b.Property<int>("IdPublicacion")
                        .HasColumnType("integer");

                    b.Property<int>("IdServicio")
                        .HasColumnType("integer");

                    b.Property<double>("PrecioServicioAdicional")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("IdServicioAdicional");

                    b.HasIndex("IdPublicacion");

                    b.HasIndex("IdServicio");

                    b.ToTable("ServiciosAdicionales");
                });

            modelBuilder.Entity("Dviaje.Models.Verificado", b =>
                {
                    b.Property<int>("IdVerificado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdVerificado"));

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("timestamp");

                    b.Property<string>("IdAliado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VerificadoEstado")
                        .HasColumnType("integer");

                    b.HasKey("IdVerificado");

                    b.HasIndex("IdAliado");

                    b.ToTable("Verificados");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1717add7-89b4-4bf7-990f-a9f10f18aa39",
                            Name = "Turista",
                            NormalizedName = "TURISTA"
                        },
                        new
                        {
                            Id = "651e4e93-f8a9-4c4e-9e85-9f0aea1d1894",
                            Name = "Aliado",
                            NormalizedName = "ALIADO"
                        },
                        new
                        {
                            Id = "4751f532-04d5-497f-b48d-b9e26bcffe6f",
                            Name = "Moderador",
                            NormalizedName = "MODERADOR"
                        },
                        new
                        {
                            Id = "e5cd3d4a-2687-49cd-b57c-c8eddfbf2e19",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "11bc73ce-dbe2-4370-bc92-0d57e5b366d7",
                            RoleId = "1717add7-89b4-4bf7-990f-a9f10f18aa39"
                        },
                        new
                        {
                            UserId = "26cfe5c9-00f8-411e-b589-df3405a8b798",
                            RoleId = "1717add7-89b4-4bf7-990f-a9f10f18aa39"
                        },
                        new
                        {
                            UserId = "2c49ebc9-3bcd-4f22-a87e-186a1c0c55e1",
                            RoleId = "1717add7-89b4-4bf7-990f-a9f10f18aa39"
                        },
                        new
                        {
                            UserId = "e4309639-4588-4553-8c14-5ce4426e0dd7",
                            RoleId = "1717add7-89b4-4bf7-990f-a9f10f18aa39"
                        },
                        new
                        {
                            UserId = "3a895383-b546-4693-8246-924a9fc5289f",
                            RoleId = "1717add7-89b4-4bf7-990f-a9f10f18aa39"
                        },
                        new
                        {
                            UserId = "1c8e89f7-7db6-4cd5-907d-f01b058cd784",
                            RoleId = "1717add7-89b4-4bf7-990f-a9f10f18aa39"
                        },
                        new
                        {
                            UserId = "13825fa6-5c27-4303-ab17-6e13aac24c12",
                            RoleId = "1717add7-89b4-4bf7-990f-a9f10f18aa39"
                        },
                        new
                        {
                            UserId = "230d9aeb-6bca-4faa-b867-2d49e1a8c12e",
                            RoleId = "1717add7-89b4-4bf7-990f-a9f10f18aa39"
                        },
                        new
                        {
                            UserId = "2e59aa62-61bd-4c8d-9a3d-13f461696eab",
                            RoleId = "1717add7-89b4-4bf7-990f-a9f10f18aa39"
                        },
                        new
                        {
                            UserId = "ca0a0328-0f5b-4ff3-b40e-6ffa8d145abb",
                            RoleId = "1717add7-89b4-4bf7-990f-a9f10f18aa39"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Dviaje.Models.Aliado", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("AliadoEstado")
                        .HasColumnType("integer");

                    b.Property<string>("Direccion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RazonSocial")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("SitioWeb")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("Verificado")
                        .HasColumnType("boolean");

                    b.HasIndex("Direccion")
                        .IsUnique();

                    b.HasIndex("RazonSocial")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Aliado");
                });

            modelBuilder.Entity("Dviaje.Models.Usuario", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasIndex("Avatar")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Usuario");

                    b.HasData(
                        new
                        {
                            Id = "11bc73ce-dbe2-4370-bc92-0d57e5b366d7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ceb1cae2-31de-4856-bad8-c4cdf4eb3dde",
                            Email = "andres@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDRES@GMAIL.COM",
                            NormalizedUserName = "ANDRES",
                            PhoneNumber = "3159725595",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "f6caecc2-9b3a-4787-af10-69b13bbef353",
                            TwoFactorEnabled = false,
                            UserName = "Andres",
                            Avatar = "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8YXZhdGFyfGVufDB8fDB8fHww"
                        },
                        new
                        {
                            Id = "26cfe5c9-00f8-411e-b589-df3405a8b798",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc221577-342b-4c71-9e76-d59f4a2837c2",
                            Email = "maria@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA@GMAIL.COM",
                            NormalizedUserName = "MARIA",
                            PhoneNumber = "3101234567",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0cbb88d9-3ccb-4792-b737-749e199b2c3b",
                            TwoFactorEnabled = false,
                            UserName = "Maria",
                            Avatar = "https://plus.unsplash.com/premium_photo-1658527049634-15142565537a?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MXx8YXZhdGFyfGVufDB8fDB8fHww"
                        },
                        new
                        {
                            Id = "2c49ebc9-3bcd-4f22-a87e-186a1c0c55e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21e68587-3782-48e4-b767-7c697ebde426",
                            Email = "carlos@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CARLOS@YAHOO.COM",
                            NormalizedUserName = "CARLOS",
                            PhoneNumber = "3189876543",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cbf8a3ce-2c74-4c43-9326-c03e6c93f2ed",
                            TwoFactorEnabled = false,
                            UserName = "Carlos",
                            Avatar = "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8YXZhdGFyfGVufDB8fDB8fHww"
                        },
                        new
                        {
                            Id = "e4309639-4588-4553-8c14-5ce4426e0dd7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bb68220-57ec-455d-a264-44388ef85524",
                            Email = "sofia@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SOFIA@HOTMAIL.COM",
                            NormalizedUserName = "SOFIA",
                            PhoneNumber = "3123456789",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8f25e936-03f4-46b2-b6e5-ea6ded0d12bf",
                            TwoFactorEnabled = false,
                            UserName = "Sofia",
                            Avatar = "https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Nnx8YXZhdGFyfGVufDB8fDB8fHww"
                        },
                        new
                        {
                            Id = "3a895383-b546-4693-8246-924a9fc5289f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "127dc7a5-7f65-42ed-8df2-6ca452ce5438",
                            Email = "luis@outlook.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUIS@OUTLOOK.COM",
                            NormalizedUserName = "LUIS",
                            PhoneNumber = "3112345678",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2a215468-0de1-4e88-b85a-385a6ceac830",
                            TwoFactorEnabled = false,
                            UserName = "Luis",
                            Avatar = "https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NHx8YXZhdGFyfGVufDB8fDB8fHww"
                        },
                        new
                        {
                            Id = "1c8e89f7-7db6-4cd5-907d-f01b058cd784",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4e7a59f-4141-4500-93b5-9a550b341de9",
                            Email = "isabella@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ISABELLA@GMAIL.COM",
                            NormalizedUserName = "ISABELLA",
                            PhoneNumber = "3179876543",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cd1a47b7-3cff-4b08-98c2-a34603dd01e5",
                            TwoFactorEnabled = false,
                            UserName = "Isabella",
                            Avatar = "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8OHx8YXZhdGFyfGVufDB8fDB8fHww"
                        },
                        new
                        {
                            Id = "13825fa6-5c27-4303-ab17-6e13aac24c12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb6d1d54-293a-4df9-be22-6cdf3d6d6b49",
                            Email = "fernando@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FERNANDO@YAHOO.COM",
                            NormalizedUserName = "FERNANDO",
                            PhoneNumber = "3198765432",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3d4cf244-4eac-435b-8e1b-89b6836b1b1e",
                            TwoFactorEnabled = false,
                            UserName = "Fernando",
                            Avatar = "https://images.unsplash.com/photo-1543610892-0b1f7e6d8ac1?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8N3x8YXZhdGFyfGVufDB8fDB8fHww"
                        },
                        new
                        {
                            Id = "230d9aeb-6bca-4faa-b867-2d49e1a8c12e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ec4ef68-ee24-4a8c-beb6-5ee83cef7236",
                            Email = "ana@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANA@HOTMAIL.COM",
                            NormalizedUserName = "ANA",
                            PhoneNumber = "3149876543",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "13f60b3e-9675-47eb-bd49-c02d65eec0bb",
                            TwoFactorEnabled = false,
                            UserName = "Ana",
                            Avatar = "https://plus.unsplash.com/premium_photo-1670884441012-c5cf195c062a?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8OXx8YXZhdGFyfGVufDB8fDB8fHww"
                        },
                        new
                        {
                            Id = "2e59aa62-61bd-4c8d-9a3d-13f461696eab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b9c8b72-abb3-4bc2-a365-a40659859418",
                            Email = "jorge@outlook.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JORGE@OUTLOOK.COM",
                            NormalizedUserName = "JORGE",
                            PhoneNumber = "3151234567",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6542ee83-d289-4404-a023-4a69defab324",
                            TwoFactorEnabled = false,
                            UserName = "Jorge",
                            Avatar = "https://images.unsplash.com/photo-1623582854588-d60de57fa33f?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTJ8fGF2YXRhcnxlbnwwfHwwfHx8MA%3D%3D"
                        },
                        new
                        {
                            Id = "ca0a0328-0f5b-4ff3-b40e-6ffa8d145abb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37904069-60cd-4c94-bac0-a6c9d37fff3d",
                            Email = "gabriela@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GABRIELA@GMAIL.COM",
                            NormalizedUserName = "GABRIELA",
                            PhoneNumber = "3169876543",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1edcb2fd-79b7-4dda-acbc-9c32accd1cb6",
                            TwoFactorEnabled = false,
                            UserName = "Gabriela",
                            Avatar = "https://images.unsplash.com/photo-1706885093487-7eda37b48a60?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTl8fGF2YXRhcnxlbnwwfHwwfHx8MA%3D%3D"
                        });
                });

            modelBuilder.Entity("Dviaje.Models.Adjunto", b =>
                {
                    b.HasOne("Dviaje.Models.AtencionViajero", "AtencionViajero")
                        .WithMany()
                        .HasForeignKey("IdAtencion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AtencionViajero");
                });

            modelBuilder.Entity("Dviaje.Models.AtencionViajero", b =>
                {
                    b.HasOne("Dviaje.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dviaje.Models.Favorito", b =>
                {
                    b.HasOne("Dviaje.Models.Publicacion", "Publicacion")
                        .WithMany()
                        .HasForeignKey("IdPublicacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dviaje.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publicacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dviaje.Models.FechaNoDisponible", b =>
                {
                    b.HasOne("Dviaje.Models.Publicacion", "Publicacion")
                        .WithMany()
                        .HasForeignKey("IdPublicacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publicacion");
                });

            modelBuilder.Entity("Dviaje.Models.Publicacion", b =>
                {
                    b.HasOne("Dviaje.Models.Aliado", "Aliado")
                        .WithMany()
                        .HasForeignKey("IdAliado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aliado");
                });

            modelBuilder.Entity("Dviaje.Models.PublicacionCategoria", b =>
                {
                    b.HasOne("Dviaje.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dviaje.Models.Publicacion", "Publicacion")
                        .WithMany()
                        .HasForeignKey("IdPublicacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Publicacion");
                });

            modelBuilder.Entity("Dviaje.Models.PublicacionFavorita", b =>
                {
                    b.HasOne("Dviaje.Models.Publicacion", "Publicacion")
                        .WithMany()
                        .HasForeignKey("IdPublicacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publicacion");
                });

            modelBuilder.Entity("Dviaje.Models.PublicacionImagen", b =>
                {
                    b.HasOne("Dviaje.Models.Publicacion", "Publicacion")
                        .WithMany()
                        .HasForeignKey("IdPublicacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publicacion");
                });

            modelBuilder.Entity("Dviaje.Models.PublicacionRestriccion", b =>
                {
                    b.HasOne("Dviaje.Models.Publicacion", "Publicacion")
                        .WithMany()
                        .HasForeignKey("IdPublicacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dviaje.Models.Restriccion", "Restriccion")
                        .WithMany()
                        .HasForeignKey("IdRestriccion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publicacion");

                    b.Navigation("Restriccion");
                });

            modelBuilder.Entity("Dviaje.Models.PublicacionServicio", b =>
                {
                    b.HasOne("Dviaje.Models.Publicacion", "Publicacion")
                        .WithMany()
                        .HasForeignKey("IdPublicacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dviaje.Models.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("IdServicio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publicacion");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Dviaje.Models.Resena", b =>
                {
                    b.HasOne("Dviaje.Models.Reserva", "Reserva")
                        .WithMany()
                        .HasForeignKey("IdReserva")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("Dviaje.Models.Reserva", b =>
                {
                    b.HasOne("Dviaje.Models.Publicacion", "Publicacion")
                        .WithMany()
                        .HasForeignKey("IdPublicacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dviaje.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publicacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dviaje.Models.ServicioAdicional", b =>
                {
                    b.HasOne("Dviaje.Models.Publicacion", "Publicacion")
                        .WithMany()
                        .HasForeignKey("IdPublicacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dviaje.Models.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("IdServicio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publicacion");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Dviaje.Models.Verificado", b =>
                {
                    b.HasOne("Dviaje.Models.Aliado", "Aliado")
                        .WithMany()
                        .HasForeignKey("IdAliado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aliado");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
